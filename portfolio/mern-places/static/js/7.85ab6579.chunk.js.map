{"version":3,"sources":["places/components/PlaceItemDiv.js","places/pages/Place.js"],"names":["PlaceItemDiv","props","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","process","id","Authorization","token","onDelete","Fragment","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","className","Map","center","coordinates","zoom","inverse","danger","title","src","image","alt","LoadingSpinner","asOverlay","description","userId","creatorId","to","Place","loadedPlace","setLoadedPlace","placeId","useParams","useEffect","responseData","place","fetchPlace","console","log","key","creator","location"],"mappings":"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","file":"static/js/7.85ab6579.chunk.js","sourcesContent":["import React, { useState, useContext } from 'react';\n// import { Link } from 'react-router-dom';\n\n// import Card from '../../shared/components/UIElements/Card';\nimport Button from '../../shared/components/FormElements/Button';\nimport Modal from '../../shared/components/UIElements/Modal';\nimport Map from '../../shared/components/UIElements/Map';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport './PlaceItemDiv.css';\n\nconst PlaceItemDiv = (props) => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const auth = useContext(AuthContext);\n  const [showMap, setShowMap] = useState(false);\n\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  const openMapHandler = () => setShowMap(true);\n  const closeMapHandler = () => setShowMap(false);\n\n  // const placeCoordinates = JSON.stringify(props.location, null, 4);\n  // console.log(props);\n\n  const showDeleteWarningHandler = () => {\n    setShowConfirmModal(true);\n  };\n  const cancelDeleteHandler = () => {\n    setShowConfirmModal(false);\n  };\n\n  const confirmDeleteHandler = async () => {\n    setShowConfirmModal(false);\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/places/${props.id}`,\n        'DELETE',\n        null,\n        {\n          Authorization: 'Bearer ' + auth.token,\n        }\n      );\n      props.onDelete(props.id);\n    } catch (err) {}\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Modal\n        show={showMap}\n        onCancel={closeMapHandler}\n        header={props.address}\n        contentClass='place-item__modal-content'\n        footerClass='place-item__modal-actions'\n        footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\n      >\n        <div className='map-container'>\n          <Map center={props.coordinates} zoom={14} />\n        </div>\n      </Modal>\n      <Modal\n        show={showConfirmModal}\n        onCancel={cancelDeleteHandler}\n        header='Are you sure?'\n        footerClass='place-item__modal-actions'\n        footer={\n          <React.Fragment>\n            <Button inverse onClick={cancelDeleteHandler}>\n              CANCEL\n            </Button>\n            <Button danger onClick={confirmDeleteHandler}>\n              DELETE\n            </Button>\n          </React.Fragment>\n        }\n      >\n        <p>\n          Do you want to proceed and delete\n          <br />\n          <strong>&quot;{props.title}&quot;</strong>?\n        </p>\n        <p>Please note, a deleted place cannot be recovered.</p>\n      </Modal>\n      <div className='place-details__image'>\n        <img\n          src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`}\n          alt={props.title}\n        />\n      </div>\n      <div className='place-details'>\n        {isLoading && <LoadingSpinner asOverlay />}\n\n        <div className='place-details__info'>\n          <h2>{props.title}</h2>\n          <h3 className='place-details__address'>{props.address}</h3>\n          <p className='place-details__desc'>{props.description}</p>\n        </div>\n        <div className='place-details__actions'>\n          <Button className='btn' onClick={openMapHandler}>\n            VIEW MAP\n          </Button>\n\n          {auth.userId === props.creatorId && <br />}\n\n          {auth.userId === props.creatorId && (\n            <Button className='plain' inverse to={`/places/${props.id}/update`}>\n              EDIT\n            </Button>\n          )}\n\n          {auth.userId === props.creatorId && (\n            <Button className='plain' danger onClick={showDeleteWarningHandler}>\n              DELETE\n            </Button>\n          )}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default PlaceItemDiv;\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n// import PlaceList from '../components/PlaceList';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport PlaceItemDiv from '../components/PlaceItemDiv';\r\n\r\nconst Place = () => {\r\n  const [loadedPlace, setLoadedPlace] = useState();\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const placeId = useParams().placeId;\r\n\r\n  useEffect(() => {\r\n    const fetchPlace = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`\r\n        );\r\n        // setLoadedPlace(responseData.place);\r\n        // setLoadedPlace(JSON.stringify(responseData.place));\r\n        // let placeArray = [];\r\n        // placeArray.push(JSON.stringify(responseData.place));\r\n        setLoadedPlace(responseData.place);\r\n      } catch (err) {}\r\n    };\r\n    fetchPlace();\r\n  }, [sendRequest, placeId]);\r\n\r\n  console.log('loadedPlace: ', loadedPlace);\r\n  //   console.log('loadedPlace JSON.stringify: ', JSON.stringify(loadedPlace));\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className='center'>\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      {!isLoading && loadedPlace && (\r\n        <div className='place-wrap'>\r\n          <PlaceItemDiv\r\n            key={loadedPlace.id}\r\n            id={loadedPlace.id}\r\n            image={loadedPlace.image}\r\n            title={loadedPlace.title}\r\n            description={loadedPlace.description}\r\n            address={loadedPlace.address}\r\n            creatorId={loadedPlace.creator}\r\n            coordinates={loadedPlace.location}\r\n          />\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Place;\r\n"],"sourceRoot":""}