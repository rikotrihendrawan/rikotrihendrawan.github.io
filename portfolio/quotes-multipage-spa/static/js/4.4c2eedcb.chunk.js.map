{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetails.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","onAddedCommentHandler","useCallback","length","onClick","QuoteDetails","match","useRouteMatch","getSingleQuote","quoteItem","path","exact","to","url"],"mappings":"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","file":"static/js/4.4c2eedcb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__30ohc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__16p7k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__Ad42P\",\"loading\":\"NewCommentForm_loading__lDhl8\",\"control\":\"NewCommentForm_control__3tj3C\",\"actions\":\"NewCommentForm_actions__1sS_S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__3M0FS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__1mli3\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>&quot;{props.text}&quot;</p>\n      <figcaption>- {props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef, useEffect } from 'react';\n\nimport useHttp from '../hooks/use-http';\nimport { addComment } from '../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  // const params = useParams();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../hooks/use-http';\nimport { getAllComments } from '../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  let comments;\n\n  const onAddedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === 'pending') {\n    comments = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === 'completed' && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === 'completed' &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className='centered'>No comments yet</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={params.quoteId}\n          onAddedComment={onAddedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { useEffect } from 'react';\r\n\r\nimport { Route, useParams, Link, useRouteMatch } from 'react-router-dom';\r\n\r\nimport useHttp from '../components/hooks/use-http';\r\nimport { getSingleQuote } from '../components/lib/api';\r\n\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\n\r\nimport Comments from '../components/comments/Comments';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\n\r\n/*const DUMMY_QUOTES = [\r\n  { id: 'q1', author: 'Rocky', text: 'React is truly FUN!' },\r\n  {\r\n    id: 'q2',\r\n    author: 'Alexa',\r\n    text: 'Okulele Guitar is what I want to play',\r\n  },\r\n  { id: 'q3', author: 'My', text: 'Zumba is my escape dance' },\r\n  { id: 'q4', author: 'Max', text: 'Math is very interesting' },\r\n  { id: 'q5', author: 'Max', text: 'Ayam menyebrang jalan karena?' },\r\n  { id: 'q6', author: 'My', text: 'Cooking is my great passion!' },\r\n  { id: 'q7', author: 'Max', text: 'Physics is event more fun!' },\r\n  { id: 'q8', author: 'Rocky', text: 'FUN truly React is!' },\r\n];*/\r\n\r\nconst QuoteDetails = () => {\r\n  const params = useParams();\r\n  const match = useRouteMatch();\r\n  // console.log('match: ', match);\r\n\r\n  const { quoteId } = params;\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: quoteItem,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (!quoteItem) {\r\n    return <p>No quotes found...</p>;\r\n  }\r\n\r\n  if (status === 'pending') {\r\n    return (\r\n      <div className='centered'>\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className='centered'>{error}</p>;\r\n  }\r\n\r\n  if (!quoteItem.text) {\r\n    return <p>No quote found !</p>;\r\n  }\r\n\r\n  // const quoteItem = DUMMY_QUOTES.find((quote) => quote.id === params.quoteId);\r\n  // const quoteItem = loadedQuote.find((quote) => quote.id === params.quoteId);\r\n\r\n  return (\r\n    <section>\r\n      <HighlightedQuote text={quoteItem.text} author={quoteItem.author} />\r\n\r\n      {/* <Route path={`/quotes/${quoteItem.id}`} exact> */}\r\n      <Route path={match.path} exact>\r\n        <div className='centered'>\r\n          {/* <Link className='btn--flat' to={`/quotes/${quoteItem.id}/comments`}> */}\r\n          <Link className='btn--flat' to={`${match.url}/comments`}>\r\n            Load Comment\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n\r\n      {/* <Route path={`/quotes/${quoteItem.id}/comments`} exact> */}\r\n      <Route path={`${match.path}/comments`} exact>\r\n        <Comments />\r\n      </Route>\r\n\r\n      {/* <h1>\r\n        &quot;<em>{quoteItem.text}</em>&quot;\r\n      </h1>\r\n      <p>{quoteItem.author}</p> */}\r\n      {/* <Route path={`/quotes/${params.quoteId}/comment`} exact> */}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default QuoteDetails;\r\n"],"sourceRoot":""}