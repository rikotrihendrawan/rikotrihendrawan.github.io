{"version":3,"sources":["utils.js","SingleColor.js","App.js","index.js"],"names":["componentToHex","c","hex","toString","length","rgbToHex","r","g","b","SingleColor","rgb","weight","index","hexColor","useState","alert","setAlert","bcg","join","hexValue","useEffect","timeout","setTimeout","clearTimeout","id","className","style","backgroundColor","borderBottom","borderRight","onClick","navigator","clipboard","writeText","toUpperCase","App","initColor","color","setColor","error","setError","initValue","Values","all","list","setList","document","body","backgroundImage","backgroundSize","backgroundRepeat","setBGColor","onSubmit","e","preventDefault","colors","console","log","type","size","placeholder","value","onChange","target","getElementById","select","map","ReactDOM","render"],"mappings":"+OAAA,SAASA,EAAeC,GACtB,IAAIC,EAAMD,EAAEE,SAAS,IACrB,OAAsB,IAAfD,EAAIE,OAAe,IAAMF,EAAMA,EAOzBG,MAJf,SAAkBC,EAAGC,EAAGC,GACtB,MAAO,IAAMR,EAAeM,GAAKN,EAAeO,GAAKP,EAAeQ,I,OC8BvDC,EAjCK,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAEzC,EAA0BC,oBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAMP,EAAIQ,KAAK,KAEfC,GADMd,EAAQ,WAAR,cAAYK,IACV,WAAOG,IAOrB,OANAO,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACzBN,GAAS,KACR,KACH,OAAO,kBAAMO,aAAaF,MACzB,CAACN,IAEF,0BACES,GAAE,mBAAcZ,GAChBa,UAAS,gBAAWb,EAAQ,IAAM,eAClCc,MAAO,CACLC,gBAAgB,OAAD,OAASV,EAAT,KACfW,aAAc,iBACdC,YAAa,kBAEfC,QAAS,WACPd,GAAS,GACTe,UAAUC,UAAUC,UAAUd,IAVlC,UAaGJ,GAAS,mBAAGU,UAAU,QAAb,oCACV,mBAAGA,UAAU,cAAb,SAA4BN,EAASe,gBACrC,oBAAGT,UAAU,gBAAb,UAA8Bd,EAA9B,WCuCSwB,MAlEf,WACE,IAAMC,EAAY,UAClB,EAA0BtB,mBAASsB,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BxB,oBAAS,GAAnC,mBAAOyB,EAAP,KAAcC,EAAd,KACMC,EAAY,IAAIC,IAAON,GAAWO,IAAI,GAC5C,EAAwB7B,mBAAS2B,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAwBA,OAvBmB,SAACR,GAClBS,SAASC,KAAKrB,MAAMsB,gBAApB,kDAAiFX,EAAjF,KACAS,SAASC,KAAKrB,MAAMuB,eAAiB,QACrCH,SAASC,KAAKrB,MAAMwB,iBAAmB,YAEzCC,CAAWd,GAmBT,qCACE,0BAASZ,UAAU,yBAAnB,UACE,oBAAIA,UAAU,QAAd,0CACA,uBAAM2B,SApBS,SAACC,GACpBA,EAAEC,iBACF,IACE,IAAIC,EAAS,IAAIb,IAAOL,GAAOM,IAAI,GAEnCE,EAAQU,GACR,MAAOhB,GACPC,GAAS,GACTgB,QAAQC,IAAIlB,KAYV,UACE,uBACEf,GAAG,eACHkC,KAAK,OACLC,KAAK,KACLC,YAAY,oCACZC,MAAOxB,GAASD,EAChB0B,SAAU,SAACT,GAAD,OAAOf,EAASe,EAAEU,OAAOF,QACnCpC,UAAS,UAAKc,EAAQ,QAAU,MAChCT,QAjBe,WACvBgB,SAASkB,eAAe,gBAAgBC,YAkBlC,wBAAQxC,UAAU,MAAMiC,KAAK,SAA7B,mCAKJ,yBAASjC,UAAU,SAAnB,SACGmB,EAAKsB,KAAI,SAAC7B,EAAOzB,GAEhB,OACE,cAAC,EAAD,2BAEMyB,GAFN,IAGEzB,MAAOA,EACPC,SAAUwB,EAAMnC,MAHXU,Y,MCrDnBuD,IAASC,OAAO,cAAC,EAAD,IAAStB,SAASkB,eAAe,W","file":"static/js/main.8e1482a4.chunk.js","sourcesContent":["function componentToHex(c) {\n  var hex = c.toString(16);\n  return hex.length === 1 ? \"0\" + hex : hex;\n}\n\nfunction rgbToHex(r, g, b) {\n  return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\n\nexport default rgbToHex;\n","import React, { useState, useEffect } from 'react';\nimport rgbToHex from './utils';\n\nconst SingleColor = ({ rgb, weight, index, hexColor }) => {\n  // console.log({ rgb, weight, index, hexColor });\n  const [alert, setAlert] = useState(false);\n  const bcg = rgb.join(',');\n  const hex = rgbToHex(...rgb);\n  const hexValue = `#${hexColor}`;\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setAlert(false);\n    }, 3000);\n    return () => clearTimeout(timeout);\n  }, [alert]);\n  return (\n    <article\n      id={`color_id_${index}`}\n      className={`color ${index > 10 && 'color-light'}`}\n      style={{\n        backgroundColor: `rgb(${bcg})`,\n        borderBottom: '1px solid #999',\n        borderRight: '1px solid #ddd',\n      }}\n      onClick={() => {\n        setAlert(true);\n        navigator.clipboard.writeText(hexValue);\n      }}\n    >\n      {alert && <p className='alert'>Copied to clipboard...</p>}\n      <p className='color-value'>{hexValue.toUpperCase()}</p>\n      <p className='percent-value'>{weight}%</p>\n    </article>\n  );\n};\n\nexport default SingleColor;\n","import React, { useState } from 'react';\nimport Values from 'values.js';\nimport SingleColor from './SingleColor';\n\nfunction App() {\n  const initColor = '#FF9900';\n  const [color, setColor] = useState(initColor);\n  const [error, setError] = useState(false);\n  const initValue = new Values(initColor).all(1);\n  const [list, setList] = useState(initValue);\n  const setBGColor = (color) => {\n    document.body.style.backgroundImage = `linear-gradient(to right bottom, white, ${color})`;\n    document.body.style.backgroundSize = 'cover';\n    document.body.style.backgroundRepeat = 'no-repeat';\n  };\n  setBGColor(color);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    try {\n      let colors = new Values(color).all(1);\n      // console.log(colors); // array of colors in RGB\n      setList(colors);\n    } catch (error) {\n      setError(true);\n      console.log(error);\n    }\n  };\n\n  const selectColorInput = () => {\n    document.getElementById('enteredColor').select();\n  };\n\n  return (\n    <>\n      <section className='container main-heading'>\n        <h1 className='title'>ReactJS Color Hues Generator</h1>\n        <form onSubmit={handleSubmit}>\n          <input\n            id='enteredColor'\n            type='text'\n            size='50'\n            placeholder='#ff77cc OR Type a color, e.g. RED'\n            value={color || initColor}\n            onChange={(e) => setColor(e.target.value)}\n            className={`${error ? 'error' : null}`}\n            onClick={selectColorInput}\n          />\n          <button className='btn' type='submit'>\n            Generate Colors\n          </button>\n        </form>\n      </section>\n      <section className='colors'>\n        {list.map((color, index) => {\n          // console.log('color, index: ', color, index);\n          return (\n            <SingleColor\n              key={index}\n              {...color}\n              index={index}\n              hexColor={color.hex}\n            />\n          );\n        })}\n      </section>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}