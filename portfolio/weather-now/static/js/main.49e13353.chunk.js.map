{"version":3,"sources":["components/WeatherDetails.js","components/searchMain.js","App.js","index.js"],"names":["WeatherDetails","temp","humidity","pressure","weatherType","name","speed","country","sunset","useState","weatherState","setWeatherState","useEffect","sec","console","log","temperature","parseFloat","toFixed","date","Date","timeStr","getHours","getMinutes","className","toLocaleString","SearchMain","searchTerm","setSearchTerm","tempInfo","setTempInfo","getWeatherInfo","a","url","fetch","res","json","data","main","weather","wind","sys","type","placeholder","id","value","onChange","event","target","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49e13353.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction WeatherDetails({\n  temp,\n  humidity,\n  pressure,\n  weatherType,\n  name,\n  speed,\n  country,\n  sunset,\n}) {\n  const [weatherState, setWeatherState] = useState('');\n  useEffect(() => {\n    if (weatherType) {\n      switch (weatherType) {\n        case 'Clouds':\n          setWeatherState('wi-day-cloudy');\n          break;\n        case 'Haze':\n          setWeatherState('wi-fog');\n          break;\n        case 'Clear':\n          setWeatherState('wi-day-sunny');\n          break;\n        case 'Mist':\n          setWeatherState('wi-dust');\n          break;\n        case 'Rain':\n          setWeatherState('wi-day-rain');\n          break;\n\n        default:\n          setWeatherState('wi-day-sunny');\n          break;\n      }\n    }\n  }, [weatherType]);\n\n  //conveting the seconds in time\n  let sec = sunset;\n  console.log(temp);\n  let temperature = parseFloat(temp).toFixed(1);\n  let date = new Date(sec * 1000);\n  let timeStr = `${date.getHours()}:${date.getMinutes()}`;\n  return (\n    <>\n      <article className='widget'>\n        <div className='weatherIcon'>\n          <i className={`wi ${weatherState}`}></i>\n        </div>\n        <div className='weatherInfo'>\n          <div className='temperature'>\n            <span>{temperature}&deg;C</span>\n          </div>\n          <div className='description'>\n            <div className='weatherCondition'>{weatherType}</div>\n            <div className='place'>\n              {name}, {country}\n            </div>\n          </div>\n        </div>\n        <div className='date'>{new Date().toLocaleString()}</div>\n        <div className='extra-temp'>\n          <div className='temp-info-minmax'>\n            <div className='two-sided-section'>\n              <p>\n                <i className={'wi wi-sunset'}></i>\n              </p>\n              <p className='extra-info-leftside'>\n                {timeStr} PM <br />\n                Sunset\n              </p>\n            </div>\n\n            <div className='two-sided-section'>\n              <p>\n                <i className={'wi wi-humidity'}></i>\n              </p>\n              <p className='extra-info-leftside'>\n                {humidity} <br />\n                Humidity\n              </p>\n            </div>\n          </div>\n\n          <div className='weather-extra-info'>\n            <div className='two-sided-section'>\n              <p>\n                <i className={'wi wi-rain'}></i>\n              </p>\n              <p className='extra-info-leftside'>\n                {pressure} <br />\n                Pressure\n              </p>\n            </div>\n\n            <div className='two-sided-section'>\n              <p>\n                <i className={'wi wi-strong-wind'}></i>\n              </p>\n              <p className='extra-info-leftside'>\n                {speed} <br />\n                Speed\n              </p>\n            </div>\n          </div>\n        </div>\n      </article>\n    </>\n  );\n}\n\nexport default WeatherDetails;\n","import React, { useEffect, useState } from 'react';\nimport '../components/style.css';\nimport WeatherDetails from './WeatherDetails';\n\nfunction SearchMain() {\n  const [searchTerm, setSearchTerm] = useState('San Francisco');\n  const [tempInfo, setTempInfo] = useState({});\n\n  const apiKey = '679e2b244b4efa1d9b420c236490aec7';\n\n  const getWeatherInfo = async () => {\n    try {\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchTerm}&units=metric&appid=${apiKey}`;\n\n      let res = await fetch(url);\n      let data = await res.json();\n      const { temp, humidity, pressure } = data.main;\n      const { main: weatherType } = data.weather[0];\n      const { name } = data;\n      const { speed } = data.wind;\n      const { country, sunset } = data.sys;\n\n      const myNewWeatherInfo = {\n        temp,\n        humidity,\n        pressure,\n        weatherType,\n        name,\n        speed,\n        country,\n        sunset,\n      };\n\n      setTempInfo(myNewWeatherInfo);\n      // console.log(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getWeatherInfo();\n  }, []);\n\n  return (\n    <>\n      <div className='wrap'>\n        <div className='search'>\n          <input\n            type='search'\n            placeholder='Enter City'\n            id='search'\n            value={searchTerm}\n            onChange={(event) => setSearchTerm(event.target.value)}\n          />\n          <button className='searchButton' onClick={getWeatherInfo}>\n            SEARCH\n          </button>\n        </div>\n      </div>\n      {/* This the the weather details page */}\n      <WeatherDetails {...tempInfo} />\n    </>\n  );\n}\n\nexport default SearchMain;\n","import \"./App.css\";\nimport SearchMain from \"./components/searchMain\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchMain />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}